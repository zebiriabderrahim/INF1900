
                        ██████╗░░█████╗░██████╗░███████╗██╗░░██╗
                        ██╔══██╗██╔══██╗██╔══██╗██╔════╝╚██╗██╔╝
                        ██████╔╝██║░░██║██████╦╝█████╗░░░╚███╔╝░
                        ██╔══██╗██║░░██║██╔══██╗██╔══╝░░░██╔██╗░
                        ██║░░██║╚█████╔╝██████╦╝███████╗██╔╝╚██╗
                        ╚═╝░░╚═╝░╚════╝░╚═════╝░╚══════╝╚═╝░░╚═╝
                        
        █▄░█ █▀█ ▀█▀ █▀▀ █▀  █▀█ █▀█ █░█ █▀█  █▀▀ █▀█ █▀█ █▀█ █▀▀ █▀▀ ▀█▀ █▀▀ █░█ █▀█
        █░▀█ █▄█ ░█░ ██▄ ▄█  █▀▀ █▄█ █▄█ █▀▄  █▄▄ █▄█ █▀▄ █▀▄ ██▄ █▄▄ ░█░ ██▄ █▄█ █▀▄


-On a englober toutes les classes qui representent une fonctionnalitee physique du robot dans une nouvelle classe "Robot", 
 on a aussi ajouter les classes de sensors, le tout dans la librairie. 

- Le main concentre tout le projet et compose un switch case qui permet de choisir la fonctionnalitee a executer.

- On enregistre les vitesses de chaque roues du robot a chaque passage dans la boucle (SI on est en mode parcours avant le Uturn).
  En memoire, (255,255) indique l'instruction de fin du mode reprise. 

- Pour tout compiler et installer sur le robot, il suffit de faire ./makelib dans le repertoire app.
  C'est une commande bash qui va "make lib" (ce qui creer la librairie dans le repertoire lib) et "make install" pour installer l'app
  sur le robot.
  Sinon make install dans le repertoire app fonctionne parfaitement.


